name: assignment3
on: push

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: meals:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: meals
          path: /tmp/image.tar

      - name: Log build result
        if: always()
        run: |
          datetime=$(date -Iminutes)
          names="Noah Schlesinger"
          echo $datetime >> log.txt
          echo $names >> log.txt

      - name: Log build result success
        if: success()
        run: echo "Mmage built successfully" >> log.txt

      - name: Log build result fail
        if: failure()
        run: echo "Image not able to be built" >> log.txt

      - name: Log build result final
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Logs
          path: log.txt

  test:
    name: test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3 # downloads all artifacts
      - name: Load Docker images from previous workflows
        run: docker load --input meals/image.tar
      - name: run image in container
        run: docker run --name mealsCont -p 8000:8000 meals
      - name: Write container result to log file
        run: |
          if docker ps --format '{{.Names}}' | grep -q '^mealsCont$'; then
            echo "Container running" >> Logs/log.txt
          else
            echo "Container failed to run" >> Logs/log.txt
          fi
      #2. set up python and pytest environment
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest # not using yet lint checker like ruff
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
       #3. run pytest tests and check results
      - name: Test with pytest  # additionally use ruff or other lint checkers
        run: |
          cd pytest-code
          pytest -v test_word.py > test_results.txt
      - name: upload test results
        if: always()  # always perform this step even if tests fail, to see results
        uses: actions/upload-artifact@v3
        with:
        name: GH_test_results
        path: pytest-code/test_results.txt
      - name: Write test result to log file
        if: always()  # always perform this step even if tests fail, to see results
        run: |
          if grep -q "FAILED" pytest-code/test_results.txt; then
            echo "tests failed" >> Logs/log.txt
          else
            echo "tests succeeded" >> Logs/log.txt
          fi

      - name: Upload updated log file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Logs
          path: Logs/log.txt